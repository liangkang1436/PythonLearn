#
# @author xiashuo
# @date 2023/6/3 14:25
#

name = 'tom'
print(type(name))
print(name)
name = "tom"
print(name)
name = """
i am tom
i like coding
"""
print(name)

# 转义字符的使用
name = '\'tom\''
print(name)
name = "\"tom\""
print(name)
name = """"
"tset"
i am tom
i like coding
\""""
print(name)

# 不进行转义，直接输出字符串原本的内容
name_raw = r'\'tom\''
# 输出 \'tom\'
print(name_raw)

# 字符串格式化
# 1、 " %s,%d " % (a1,a2)
print("my name is %s, my height is %.2f cm" % ("xiaohong", 2.345))
''' %s : 字符串
    %d ：十进制整数
    %f : 浮点型， %.3f： 保留三位小数
    %x : 十六进制
    指定长度：
        %5d     右对齐，不足左边补空格
        %05d    右对齐，不足左边补0
        %-5d    - 代表左对齐，不足右边默认补空格
        %-05d    - 代表左对齐，左对齐时设置补0是无效的，因为往右边补0会改变数字的大小

    浮点数：
        %f   默认是输出6位有效数据， 会进行四舍五入
        %.2f 指定小数点位数的输出 保留小数点后2位,会进行四舍五入
        %6.4f  6代表整个浮点数的长度，包括小数点和小数部分，只有当字符串的长度小于6位才起作用，不足6位空格补足，可以用%04.8使用0补足空格，默认左边补0（右对齐），
        可以通过 - 设置左对齐，左对齐时设置补0是无效的
'''
age = 18
name = "xiashuo.xyz"
salary = 45.1265
# % 表示：我要占位
# s 表示：将变量转化成字符串类型放入占位的地方
introduction = "my name is %s , and i am %s years old , my salary is %s" % (name, age, salary)
print(introduction)
print('------------------------------------------------')
# 除了%s 还可以使用别的类型 比如 %d 、 %f 同时浮点型保留四位小数
introduction = "my name is %s\nand i am %05d years old\nmy salary is %08.3f" % (name, age, salary)
# 45.1265 被格式化为 0045.127 7是保留三位小数同时四舍五入来的，同时前面两个0是为了补齐8位
print(introduction)
print('------------------------------------------------')

# 2、'{1},{2}'.format(a1,a2)
# 1) 顺序填坑：{} 占位符
print('姓名是 {}，年龄是 {}'.format('Tom', 20))
# 2) 下标填坑
print('姓名是 {0}，年龄是 {1}'.format('Tom', 20))
# 3) 变量填坑
print('姓名是 {name}，年龄是 {age}'.format(name='Tom', age=20))
print('------------------------------------------------')
# 4)对齐方式
# {:5} 指定输出长度为5.  该方式下字符串和数字的对齐形式是不一致的。字符串是左对齐，数字是右对齐。
#  用> < ^ 可以避免字符串/数值对齐方法不一致
'''
输出   不使用指定长度对齐
姓名是:Tom
年龄是:20
'''
print('姓名是:{0}\n年龄是:{1}'.format('Tom', 20))
print('------------------------------------------------')
'''
输出   使用{:5}指定长度
字符串和数字的对齐形式是不一致的。字符串是左对齐，数字是右对齐。
姓名是:Tom
年龄是:   20
'''
print('姓名是:{0:5}\n年龄是:{1:5}'.format('Tom', 20))
print('------------------------------------------------')
'''
输出   使用右对齐 >
姓名是:  Tom
年龄是:   20
'''
print('姓名是:{0:>5}\n年龄是:{1:>5}'.format('Tom', 20))
print('------------------------------------------------')
'''
输出   使用左对齐 <
姓名是:Tom
年龄是:20
'''
print('姓名是:{0:<5}\n年龄是:{1:<5}'.format('Tom', 20))
print('------------------------------------------------')
'''
输出   使用中间对齐^
姓名是: Tom
年龄是: 20
'''
print('姓名是:{0:^5}\n年龄是:{1:^5}'.format('Tom', 20))
print('------------------------------------------------')
'''
输出   使用中间对齐^，指定填充字符为*
姓名是:*Tom*
年龄是:*20**
'''
print('姓名是:{0:*^5}\n年龄是:{1:*^5}'.format('Tom', 20))
print('------------------------------------------------')
'''
指定浮点数精度
输出   使用中间对齐^，指定填充字符为*
姓名是:*Tom*
年龄是:*20.13**
'''
print('姓名是:{0:*^5}\n年龄是:{1:*^8.2f}'.format('Tom', 20.129))
print('------------------------------------------------')

# 3、f'{a1},{a2}'
# python3.6 后的版本支持 特点是不关注类型，不做精度控制，原样输出

name = 'Tom'
age = 20
# 直接使用上下文中的变量
print(f'姓名是：{name},年龄是：{age}')
print('------------------------------------------------')
# 甚至可以不写变量
print(f'姓名是：{"梁康"},年龄是：{12.12}')
print('------------------------------------------------')
#
print(f"姓名是：{'我靠，真牛逼'},年龄是：{12.12}")
print('------------------------------------------------')
#
print(f"""
我的的名字是虾说
其实我的真实姓名时{name}
我的年龄时{age}
这些都不重要
重要的是我一定会成为一个{"niubi"}的人，numer {1}
""")
